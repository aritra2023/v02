Bot Workflow Architecture
Main Entry Points:
main_large.py - Primary entry point (large file support)
main.py - Fallback entry point (standard bot)
Workflow Process:
1. Bot Initialization
Check for API credentials (TELEGRAM_API_ID, TELEGRAM_API_HASH)
If available â†’ Start LargeFileHandler (MTProto support)
If not available â†’ Fallback to TelegramVideoBot (standard bot)
2. User Interaction Flow
User sends /start â†’ Welcome message with instructions
User forwards video â†’ Bot downloads and stores video info
User clicks "ðŸŽ¬ á´„ÊŸÉªá´˜" button OR sends /clip â†’ Ask for clip duration
User enters duration â†’ Video processing starts
Bot splits video â†’ Sends individual clips back to user
3. File Processing Pipeline
Video Upload â†’ Download â†’ FFmpeg Processing â†’ Split into clips â†’ Upload clips â†’ Cleanup
Technology Stack Details
Core Libraries:
python-telegram-bot[ext]>=22.3 - Standard Telegram Bot API
pyrogram>=2.0.106 - MTProto protocol for large files (2GB support)
tgcrypto>=1.2.5 - Encryption for Pyrogram
ffmpeg-python>=0.2.0 - Python wrapper for FFmpeg
System Dependencies:
FFmpeg-full - Video processing engine (via Nix package)
Python 3.11 - Runtime environment
Architecture Components:
1. LargeFileHandler (large_file_handler.py)
Purpose: Handles files up to 2GB using MTProto
Key Features:
Pyrogram client for MTProto protocol
User session management
Callback query handling
Asynchronous file processing
2. TelegramVideoBot (bot_handler.py)
Purpose: Standard bot with 20MB file limit
Key Features:
python-telegram-bot integration
Inline keyboard support
File size validation
State management
3. VideoProcessor (video_processor.py)
Purpose: Core video splitting engine
Key Features:
FFmpeg command execution
Asynchronous subprocess handling
File cleanup management
Video metadata extraction
Processing Technologies:
FFmpeg Configuration:
ffmpeg -i input.mp4 -c copy -map 0 -f segment -segment_time 30 -reset_timestamps 1 -avoid_negative_ts make_zero output_%03d.mp4
Parameters Used:

-c copy: Stream copying (no re-encoding)
-f segment: Segment muxer for splitting
-segment_time: Duration per clip
-reset_timestamps: Reset time for each segment
File Management System:
Directory Structure:
Project/
â”œâ”€â”€ clips/                 # Output directory for processed clips
â”œâ”€â”€ large_file_handler.py  # MTProto implementation
â”œâ”€â”€ bot_handler.py         # Standard bot implementation
â”œâ”€â”€ video_processor.py     # FFmpeg processing engine
â”œâ”€â”€ main_large.py         # Large file entry point
â””â”€â”€ main.py               # Standard entry point
File Naming Convention:
Input: video_{user_id}_{message_id}.mp4
Output: clip_{user_id}_%03d.mp4
Environment Configuration:
Required Variables:
BOT_TOKEN: Telegram bot authentication
TELEGRAM_API_ID: MTProto API ID (optional, for large files)
TELEGRAM_API_HASH: MTProto API hash (optional, for large files)
Performance Optimizations:
Stream Copying: No video re-encoding for faster processing
Asynchronous Processing: Non-blocking operations
MTProto Protocol: Direct TCP connection to Telegram servers
Automatic Cleanup: Memory and storage management
Error Handling:
File size validation
FFmpeg process monitoring
Session state management
Graceful fallback mechanisms
Deployment (Replit Configuration):
Nix Modules: python-3.11, ffmpeg-full
Workflow: Automated startup via Run button
Session Persistence: SQLite session files for Pyrogram
